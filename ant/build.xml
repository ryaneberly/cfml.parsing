<project default="build">

	<property name="src.dir" location="../src"/>
	<property name="bin.dir" location="../bin"/>
	<property name="tests.bin.dir" location="../bin/tests"/>
	<property name="build.dir" location="${basedir}"/>
	<property name="output.dir" location="${bin.dir}"/>
	<property name="src.tests" location="../test/src"/>
	<property name="reports.tests" location="./testresults/"/>
	<property name="grammar.jar" location="../cfml.parsing.jar"/>
	<property name="grammar.dir" location="../antlr"/>
	<property name="grammar.file" location="${grammar.dir}/CFScript.g"/>

	<path id="build.lib.path">
		<fileset dir="${basedir}/../lib">
			<include name="*.jar" />
		</fileset>
		<!--
		<fileset dir="${basedir}/../bin/cfml/parsing/cfml/antlr/">
			<include name="*.class" />
		</fileset>
		-->
	</path>

	<!-- An ant macro which invokes ANTLR3
	This is just a parameterizable wrapper to simplify the invocation of ANTLR3.
	The default values can be overriden by assigning a value to an attribute
	when using the macro.
	Example with ANTLR3 outputdirectory modified:
	<antlr3 grammar.name="CMinus.g" outputdirectory="${src}/${package}"/>
	-->
	<macrodef name="antlr3">
		<attribute name="grammar.name" />
		<attribute name="outputdirectory" default="." />
		<attribute name="libdirectory" default="../lib" />
		<sequential>
			<java classname="org.antlr.Tool" fork="true" failonerror="true" classpathref="build.lib.path">
				<jvmarg value="-Xms512M"/>
				<jvmarg value="-Xmx1024M"/>
				<arg value="-o" />
				<arg path="@{outputdirectory}" />
				<arg value="-lib" />
				<arg path="@{libdirectory}" />
				<arg value="-verbose" />
				<arg value="-Xmultithreaded" />
				<arg value="-make" />
				<arg path="@{grammar.name}" />
			</java>
		</sequential>
	</macrodef>

	<target name="grammar.generate">
		<echo message="generating ${grammar.file}" />
		<antlr3 grammar.name="${grammar.dir}/CFML.g" outputdirectory="${src.dir}/cfml/parsing/cfml/antlr" />
		<antlr3 grammar.name="${grammar.file}" outputdirectory="${src.dir}/cfml/parsing/cfscript" />
		<antlr3 grammar.name="${grammar.dir}/CFScriptTree.g" outputdirectory="${src.dir}/cfml/parsing/cfscript" />
	</target>

	<target name="grammar.compile" depends="grammar.generate">
		<delete dir="${bin.dir}" />
		<mkdir dir="${bin.dir}" />
		<javac srcdir="${src.dir}" destdir="${bin.dir}" listfiles="Yes" deprecation="Yes" classpathref="build.lib.path" includeantruntime="false">
			<compilerarg value="-Xlint:unchecked" />
			<classpath>
				<pathelement path="${java.class.path}" />
			</classpath>
		</javac>
	</target>

	<target name="grammar.jar" depends="grammar.compile">
		<jar destfile="${grammar.jar}"
         basedir="${bin.dir}" 
         includes="**/*.class"
         />
	</target>

	<target name="build" depends="grammar.jar">
	</target>

	<target name="grammar.gunit">
		<echo message="generating ${bin.dir}/cfml/parsing/cfml/antlr/" />
		<java classname="org.antlr.gunit.Interp" classpath="../lib/antlr-3.4-complete.jar;${bin.dir}/"
	        fork="true" dir="${bin.dir}/cfml/parsing/cfml/antlr/" outputproperty="last.revision.info">
			<arg value="${grammar.dir}/grammar.fileunit"/>
		</java>
		<echo message="${last.revision.info}"/>
	</target>

	<target name="grammar.tree.gunit">
		<echo message="generating ${bin.dir}/cfml/parsing/cfml/antlr/" />
		<java classname="org.antlr.gunit.Interp" classpath="../lib/antlr-3.4-complete.jar;${bin.dir}/" 
	        fork="true" dir="${bin.dir}/cfml/parsing/cfml/antlr/" outputproperty="last.revision.info">
			<arg value="${grammar.dir}/XMLTree.gunit"/>
		</java>
		<echo message="${last.revision.info}"/>
	</target>

	<target name="test" depends="grammar.jar">
    	<mkdir dir="${reports.tests}" />
    	<mkdir dir="${tests.bin.dir}" />
	    <javac srcdir="${src.tests}" destdir="${tests.bin.dir}">
	    	<classpath>
	    	    <pathelement path="${grammar.jar}"/>
	    	    <pathelement path="${java.class.path}"/>
	    	    <pathelement path="${toString:build.path}"/>
	    	    <pathelement path="${toString:build.lib.path}"/>
    		</classpath>
	    </javac>
		<junit printsummary="true" haltonerror="false" haltonfailure="false" includeantruntime="true" fork="fa" dir="../">
	    	<classpath>
	    	    <pathelement path="${grammar.jar}"/>
	    	    <pathelement path="${java.class.path}"/>
	    	    <pathelement path="${toString:build.path}"/>
	    	    <pathelement path="${toString:build.lib.path}"/>
	    	    <pathelement path="${tests.bin.dir}"/>
	    	  </classpath>
	    	<batchtest fork="yes" todir="${reports.tests}">
	    	    <fileset dir="${src.tests}">
	    	      <include name="**/*Test*.java"/>
	    	      <exclude name="**/AllTests.java"/>
	    	    </fileset>
	    	  	<formatter type="xml"/>
	    		<formatter type="plain" usefile="false"/>
	    	  </batchtest>
	    </junit>
	</target>	
	
</project>
